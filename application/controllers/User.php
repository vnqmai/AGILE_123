<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
session_start();
if(isset($_SESSION["isadmin"])){
    if($_SESSION["isadmin"]!=1){
        header('Location: localhost/agile/auth');
        exit();
    }        
}
else if (!isset($_SESSION["isadmin"])){
    header('Location: http://'.$_SERVER['HTTP_HOST'].'/agile/auth');
    exit();
}   

class User extends MY_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('User_model');
       
    } 

    /*
     * Listing of users
     */
    function index()
    {
        $data['users'] = $this->User_model->get_all_users();
        
        $data['_view'] = 'user/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new user
     */
    function add()
    {   
        $this->form_validation->set_rules('username',"username",'required');
        $this->form_validation->set_rules('password',"password",'required');
        $this->form_validation->set_rules('confirmPassword',"confirmPassword",'required');
        if($this->form_validation->run())
        {
           $username=$this->input->post('username');
            $password = $this->input->post('password');
            $confirmPassword = $this->input->post('confirmPassword');
            $user = $this->User_model->get_user_by_username($username);

            if($user==null){
                if( $password==$confirmPassword ){
                    $params = array(
                        'password' => MD5($this->input->post('password')),
                        'username' => $this->input->post('username'),
                        'firstName' => $this->input->post('firstName'),
                        'lastName' => $this->input->post('lastName'),
                        'email' => $this->input->post('email'),
                        'phone' => $this->input->post('phone'),
                        'id'            => ObjectId()
                    );
                    $user_id = $this->User_model->add_user($params);
                    return redirect(base_url().'user');
                }
                else{
                    $data['_view'] = 'user/add';
                    $this->load->view('layouts/main',$data);
                }
            }
            else{
            $data['message']='Tài khoản đã tồn tại';
            $data['_view'] = 'user/add';
            $this->load->view('layouts/main',$data);
            }
            
           
        }
        else
        {                   
            $data['_view'] = 'user/add';
            $this->load->view('layouts/main',$data);
        }
       
    }  

    /*
     * Editing a user
     */
    function edit($id)
    {   
        // check if the user exists before trying to edit it
       
      
       
        $data['user'] = $this->User_model->get_user($id);
        if(isset($data['user']['id']))
        {
            $password = $this->input->post('password');
            $confirmPassword = $this->input->post('confirmPassword');
            if($this->form_validation->run())   
            {   
                $params = array(
					'firstName' => $this->input->post('firstName'),
					'lastName' => $this->input->post('lastName'),
					'email' => $this->input->post('email'),
					'phone' => $this->input->post('phone'),
                );
               
                if($password && $confirmPassword && $password==$confirmPassword){
                    $params['password'] =MD5($password);
                }

                $this->User_model->update_user($id,$params);            
                return redirect(base_url().'user');
            }
            else
            {
                $data['_view'] = 'user/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The user you are trying to edit does not exist.');
    } 

    
    /*
     * Deleting user
     */
    // function remove($id)
    // {
    //     $user = $this->User_model->get_user($id);

    //     // check if the class exists before trying to delete it
    //     try{
    //         if(isset($user['id']))
    //         {
    //             $bill = $this->Bill_model->get_bill_by_user_id($user['id']);
    //             $delivery_bill = $this->Delivery_bill_model->get_delivery_bill_by_user_id($user['id']);
    //             $receipt_bill = $this->Receipt_bill_model->get_receipt_bill_by_user_id($user['id']);
    //             $work = $this->Work_model->get_work_by_user_id($user['id']);
    //             if(isset($bill)){
    //             throw new Exception('Vui lòng xóa hóa đơn của nhân viên trước!');
    //             }
    //             if(isset($delivery_bill)){
    //             throw new Exception('Vui lòng xóa phiếu xuất của nhân viên trước!');
    //             }
    //             if(isset($receipt_bill)){
    //             throw new Exception('Vui lòng xóa phiếu nhập kho của nhân viên trước!');
    //             }
    //             if(isset($work)){
    //                 throw new Exception('Vui lòng xóa lịch làm việc của nhân viên trước!');
    //                 }
        
    //             $this->User_model->delete_user($id);
    //             return $this->Success(array(
    //                     'message' => 'Xóa thành công!'
    //                 ));
    //             // return redirect(base_url().'classes');
    //         }
    //         throw new Exception('Không tìm thấy nhân viên');
    //     }
    //     catch(Exception $e){
    //         return $this->Success(array(
    //             'isSuccess' => false,
    //             'message' => $e->getMessage()
    //         ));
    //     }
        
       
    // }

    function remove($id)
    {
        $user = $this->User_model->get_user($id);

        // check if the class exists before trying to delete it
        try{
            if(isset($user['id']))
            {
                $params = array(
                    'del' => 1,
                );
                $this->User_model->update_user($id,$params);   
                return $this->Success(array(
                        'message' => 'Xóa thành công!'
                    ));
                // return redirect(base_url().'classes');
            }
            throw new Exception('Không tìm thấy nhân viên');
        }
        catch(Exception $e){
            return $this->Success(array(
                'isSuccess' => false,
                'message' => $e->getMessage()
            ));
        }
        
       
    }
    
}
